getwd()
library(reticulate)
use_condaenv(condaenv = 'PFDA', conda = "C:/Users/wujia/anaconda3/envs/Python37/python.exe")
use_condaenv(condaenv = 'python37', conda = "C:/Users/wujia/anaconda3/envs/Python37/python.exe")
?use_condaenv
use_condaenv(condaenv = 'PFDA', conda = "C:/Users/wujia/anaconda3/envs/python37/python.exe")
conda_binary()
conda_list()
py_discover_config()
y
py_discover_config()
use_condaenv(condaenv = 'PFDA', conda = "C:/Users/wujia/anaconda3/envs/python37/python.exe")
use_condaenv(condaenv = 'python37', conda = "C:/Users/wujia/anaconda3/envs/python37/python.exe")
library(reticulate)
use_condaenv(condaenv = 'python37',required = TRUE)
tf_config()
library(keras)
library(tensorflow)
tf_config()
r--version
sessionInfo()
library(reticulate)
library(keras)
dataset_boston_housing()
library(tensorflow)
tf_config()
dataset_boston_housing()
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install.packages("keras")
####################################
#                                  #
# Functional Weight Plot - Final   #
#                                  #
####################################
setwd("C:/Users/wujia/school/Year 4/semester 2/FYP/FNN-main")
# Libraries
source("FNN.R")
# Loading data
load("Data/bike.RData")
# Obtaining response
rentals = log10(bike$y)
# define the time points on which the functional predictor is observed.
timepts = bike$timepts
# define the fourier basis
nbasis = 31
spline_basis = create.fourier.basis(c(1,24), nbasis)
rentals <- cbind(rentals,1:102)
# convert the functional predictor into a fda object
bike_fd =  Data2fd(timepts, t(bike$temp), spline_basis)
bike_deriv1 = deriv.fd(bike_fd)
bike_deriv2 = deriv.fd(bike_deriv1)
# Testing with bike data
func_cov_1 = bike_fd$coefs
func_cov_2 = bike_deriv1$coefs
func_cov_3 = bike_deriv2$coefs
#bike_data = array(dim = c(31, 102, 3))
bike_data = array(dim = c(31, 102, 1))
bike_data[,,1] = func_cov_1
# fData Object
bike_fdata = fdata(bike$temp, argvals = 1:24, rangeval = c(1, 24))
# Creating list
plot_list = list()
# vector of epochs
epochs_try = c(1, 25, 50, 99, 120, 140)
i = 1
# use_session_with_seed(
#   1,
#   disable_gpu = FALSE,
#   disable_parallel_cpu = FALSE,
#   quiet = TRUE
# )
tensorflow::set_random_seed(1,disable_gpu = FALSE)
# Getting results
fnn_bike <- FNN(resp = rentals,
func_cov = bike_data,
scalar_cov = NULL,
basis_choice = c("fourier"),
num_basis = c(3),
hidden_layers = 4,
neurons_per_layer = c(1, 32, 32, 32),
activations_in_layers = c("sigmoid", "sigmoid", "relu", "linear"),
domain_range = list(c(1, 24)),
epochs = epochs_try[i],
output_size = 2,
loss_choice = "mse",
metric_choice = list("mean_squared_error"),
val_split = 0.15,
learn_rate = 0.002,
patience_param = 15,
early_stop = FALSE,
print_info = FALSE)
# Getting the FNC
coefficients_fnn = rowMeans(get_weights(fnn_bike$model)[[1]])
# Setting up data set
beta_coef_fnn <- data.frame(time = seq(1, 24, 0.1),
beta_evals = beta_fnn_bike(seq(1, 24, 0.1), coefficients_fnn))
# Check 1
# Predicting
pred_fnn = FNN_Predict(fnn_bike,
bike_data,
scalar_cov = NULL,
basis_choice = c("fourier"),
num_basis = c(9),
domain_range = list(c(1, 24)))
get_weights(fnn_bike$model)[[1]]
fnn_bike$model
get_weights(fnn_bike$model)
